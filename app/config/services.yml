# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
    #parameter_name: value

services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    AppBundle\:
        resource: '../../src/AppBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/AppBundle/{Entity,Repository,Tests}'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    AppBundle\Controller\:
        resource: '../../src/AppBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    AppBundle\Serializer\ProductHandler:
        tags:
            - { name: jms_serializer.subscribing_handler }

    AppBundle\Serializer\PaginationHandler:
        tags:
            - { name: jms_serializer.subscribing_handler }

    # add more services, or override services that need manual wiring
    # AppBundle\Service\ExampleService:
    #     arguments:
    #         $someArgument: 'some_value'

    fqn_message_factory:
      class: Prooph\Common\Messaging\FQCNMessageFactory

    mysql_single_stream_strategy:
      class: Prooph\EventStore\Pdo\PersistenceStrategy\MySqlSimpleStreamStrategy

    wrapped_connection:
      class: Doctrine\DBAL\Driver\Connection
      public: true
      factory: ['@doctrine.dbal.default_connection', 'getWrappedConnection']

    mysql_event_store:
      class: Prooph\EventStore\Pdo\MySqlEventStore
      factory: ['AppBundle\EventStoreFactory', 'create']
      arguments:
        - '@fqn_message_factory'
        - '@wrapped_connection'
        - '@mysql_single_stream_strategy'
        - '@Prooph\EventStore\StreamName'

    Prooph\EventStore\StreamName:
      arguments:
        - 'event_stream'

    Prooph\EventStore\Stream:
      autowire: true
      factory:
      arguments:
        - '@Prooph\EventStore\StreamName'

    Prooph\EventSourcing\Aggregate\AggregateType:
      factory: ['Prooph\EventSourcing\Aggregate\AggregateType', 'fromAggregateRootClass']
      arguments:
        - 'Store\Checkout\Cart'

    aggregate_translator:
      class: Prooph\EventSourcing\EventStoreIntegration\AggregateTranslator

    cart_aggregate_repository:
      class: Prooph\EventSourcing\Aggregate\AggregateRepository
      public: true
      arguments:
        - '@mysql_event_store'
        - '@Prooph\EventSourcing\Aggregate\AggregateType'
        - '@aggregate_translator'

    AppBundle\Controller\Checkout\CartController:
      public: true
      arguments:
        - '@cart_aggregate_repository'



